// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: revision.sql

package sqlc

import (
	"context"
	"time"
)

const createRevision = `-- name: CreateRevision :exec
INSERT 
    INTO revisions(
        id, revise_item_id, revised_at
    ) VALUES ( ?, ?, ? )
`

type CreateRevisionParams struct {
	ID           string
	ReviseItemID string
	RevisedAt    time.Time
}

func (q *Queries) CreateRevision(ctx context.Context, arg CreateRevisionParams) error {
	_, err := q.db.ExecContext(ctx, createRevision, arg.ID, arg.ReviseItemID, arg.RevisedAt)
	return err
}

const deleteReviseItemRevisions = `-- name: DeleteReviseItemRevisions :exec
DELETE 
    FROM revisions
    WHERE revise_item_id = ?
`

func (q *Queries) DeleteReviseItemRevisions(ctx context.Context, reviseItemID string) error {
	_, err := q.db.ExecContext(ctx, deleteReviseItemRevisions, reviseItemID)
	return err
}

const deleteRevision = `-- name: DeleteRevision :exec
DELETE 
    FROM revisions
    WHERE id = ?
`

func (q *Queries) DeleteRevision(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRevision, id)
	return err
}

const getRevision = `-- name: GetRevision :one
SELECT id, revise_item_id, revised_at 
    FROM revisions 
    WHERE id = ?
`

func (q *Queries) GetRevision(ctx context.Context, id string) (Revision, error) {
	row := q.db.QueryRowContext(ctx, getRevision, id)
	var i Revision
	err := row.Scan(&i.ID, &i.ReviseItemID, &i.RevisedAt)
	return i, err
}

const getRevisionItemRevisions = `-- name: GetRevisionItemRevisions :many
SELECT id, revise_item_id, revised_at 
    FROM revisions 
    WHERE revise_item_id = ?
`

func (q *Queries) GetRevisionItemRevisions(ctx context.Context, reviseItemID string) ([]Revision, error) {
	rows, err := q.db.QueryContext(ctx, getRevisionItemRevisions, reviseItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Revision
	for rows.Next() {
		var i Revision
		if err := rows.Scan(&i.ID, &i.ReviseItemID, &i.RevisedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
