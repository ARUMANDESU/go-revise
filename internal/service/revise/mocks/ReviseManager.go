// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ARUMANDESU/go-revise/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReviseManager is an autogenerated mock type for the ReviseManager type
type ReviseManager struct {
	mock.Mock
}

// CreateRevise provides a mock function with given fields: ctx, revise
func (_m *ReviseManager) CreateRevise(ctx context.Context, revise domain.ReviseItem) error {
	ret := _m.Called(ctx, revise)

	if len(ret) == 0 {
		panic("no return value specified for CreateRevise")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReviseItem) error); ok {
		r0 = rf(ctx, revise)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRevise provides a mock function with given fields: ctx, id
func (_m *ReviseManager) DeleteRevise(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRevise")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRevise provides a mock function with given fields: ctx, revise
func (_m *ReviseManager) UpdateRevise(ctx context.Context, revise domain.ReviseItem) error {
	ret := _m.Called(ctx, revise)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRevise")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ReviseItem) error); ok {
		r0 = rf(ctx, revise)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReviseManager creates a new instance of ReviseManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviseManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviseManager {
	mock := &ReviseManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
