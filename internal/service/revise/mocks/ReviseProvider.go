// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ARUMANDESU/go-revise/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReviseProvider is an autogenerated mock type for the ReviseProvider type
type ReviseProvider struct {
	mock.Mock
}

// GetRevise provides a mock function with given fields: ctx, id
func (_m *ReviseProvider) GetRevise(ctx context.Context, id string) (domain.ReviseItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRevise")
	}

	var r0 domain.ReviseItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.ReviseItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.ReviseItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.ReviseItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduledItems provides a mock function with given fields: ctx
func (_m *ReviseProvider) GetScheduledItems(ctx context.Context) ([]domain.ScheduledItem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledItems")
	}

	var r0 []domain.ScheduledItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ScheduledItem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ScheduledItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ScheduledItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRevises provides a mock function with given fields: ctx, dto
func (_m *ReviseProvider) ListRevises(ctx context.Context, dto domain.ListReviseItemDTO) ([]domain.ReviseItem, domain.PaginationMetadata, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for ListRevises")
	}

	var r0 []domain.ReviseItem
	var r1 domain.PaginationMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListReviseItemDTO) ([]domain.ReviseItem, domain.PaginationMetadata, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListReviseItemDTO) []domain.ReviseItem); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ReviseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListReviseItemDTO) domain.PaginationMetadata); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Get(1).(domain.PaginationMetadata)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.ListReviseItemDTO) error); ok {
		r2 = rf(ctx, dto)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewReviseProvider creates a new instance of ReviseProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviseProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviseProvider {
	mock := &ReviseProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
