// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/ARUMANDESU/go-revise/internal/domain/user"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// SaveUser provides a mock function with given fields: ctx, u
func (_m *UserRepository) SaveUser(ctx context.Context, u user.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, userID, updateFn
func (_m *UserRepository) UpdateUser(ctx context.Context, userID uuid.UUID, updateFn func(*user.User) (*user.User, error)) error {
	ret := _m.Called(ctx, userID, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*user.User) (*user.User, error)) error); ok {
		r0 = rf(ctx, userID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
